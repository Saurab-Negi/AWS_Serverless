# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: saurabftechiz
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: auction-app
# "service" is the name of this project. This will also be added to your AWS resource names.
service: auction-service

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          path: /addAuction
          method: post
  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          path: /getAuctions
          method: get
  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          path: /getAuction/{id}
          method: get
  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          path: /auction/{id}/bid
          method: patch
  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule: rate(1 minute)

package:
  individually: true

build:
  esbuild:
    minify: true

custom:
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn